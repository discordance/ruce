use std::pin::Pin;

use ruce::{
    ffi::{self},
    ruce_types::{PluginProcessor, PluginProcessorImpl, RealProcessorType},
};

// // @TODO THIS SHOULD BE GENERATED BY THE CLIENT LIB VIA A MACRO
// #[no_mangle]
// #[allow(non_snake_case)]
// unsafe fn GetPluginFactory() -> *mut ffi::IPluginFactory {
//     // @Placeholder
//     let pf: *mut ffi::IPluginFactory =
//         ffi::GetPluginFactoryShim(|| {
//             let p = Box::new(PluginProcessorImpl(Box::new(RealProcessorType::new())));
//             Box::<PluginProcessorImpl>::into_raw(p)
//         });
//     return pf;
// }

// MAC obligatory entrypoint on mac
#[no_mangle]
#[allow(non_snake_case)]
fn bundleEntry(r: *mut ffi::CFBundleAlias) -> bool {
    return unsafe { ffi::bundleEntry(r) };
}

// MAC obligatory exitpoint on mac
#[no_mangle]
#[allow(non_snake_case)]
fn bundleExit() -> bool {
    return ffi::bundleExit();
}
